name: foodgram-project-react CI
on: [push]
jobs:
  build_and_push_to_docker_hub:
    name: Push Docker image to Docker hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push backend to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: ./backend
          push: true
          tags: potesuch/foodgram-project-react-backend
      - name: Push frontend to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          push: true
          tags: potesuch/foodgram-project-react-frontend
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd foodgram-project-react/
            touch .env
            echo DJANGO_SECRET=${{ secrets.DJANGO_SECRET }} > .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            sudo docker compose down
            sudo docker compose pull backendfoodgram
            sudo docker compose pull frontend_foodgram
            sudo docker compose up -d
            sudo docker compose exec backendfoodgram python manage.py migrate
            sudo docker compose exec backendfoodgram python manage.py collectstatic --noinput
            sudo docker compose cp ingredients.csv db_foodgram:/var/lib/postgresql/data/ingredients.csv
            sudo docker compose exec db_foodgram bash psql -U postgres -c "COPY recipes_ingredient(name, measurement_unit) FROM '/var/lib/postgresql/data/ingredients.csv' DELIMITER ',' CSV""

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ github.workflow }} успешно выполнен!
